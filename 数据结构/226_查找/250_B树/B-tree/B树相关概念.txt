B 树【不是二叉树】
B 树是一种平衡的多路查找树，在文件系统中很有用。

性质：一棵m阶的B 树：
		或为空树
		或为满足下列特性的m叉树：
			① 树中每个节点至多有m棵子树；
			② 若根节点不是叶子节点，则至少有两棵子树，至多m棵；至少【m/2】-1(向上取整)个关键字，至多m-1个关键字
			③ 除根之外的所有非终端节点至少有【m/2】(向上取整)棵子树，至多m棵；关键字则是【至少m/2-1,至多m-1】
			④ 非叶子节点的关键字个数 = 指向儿子的指针个数 - 1；
			⑤ 所有的非终端节点中包含下列信息数据
				(n，A0，K1，A1，K2，A2，...，Kn，An)
			⑥ 所有的叶子节点都出现在同一层次上，并且不带信息（可以看作是外部节点或查找失败的节点，实际上这些节点不存在，指向这些节点的指针为空）

在B树上进行查找的过程是一个顺指针查找节点和在节点的关键字中进行查找交叉进行的过程。

B树的查找分析：
B树查找主要包含两个操作。⑴ 在B树中找节点	⑵ 在节点中找关键字
	B树通常存储在磁盘上	
	操作⑴是在磁盘上进行的，操作⑵是在内存中进行的
	在磁盘上进行一次查找比在内存中进行一次查找所消耗的时间多的多。
因此，在磁盘上进行查找的次数、即待查关键字所在节点在B树上的层次数，是决定B-树查找效率的首要因素。

先考虑最坏情况。
即待查节点在B树上的最大层次数，也即含N个关键字的m阶B树的最大深度是多少？
要知道这个问题，必须首先对B树有一定的认识。如下例子：
	一棵3阶的B树。按B树的定义，3阶的B树上所有非终端节点至多可哟两个关键字，至少有一个关键字(即子树个数为2或3，故又称2-3树)。因此，若关键字个数<=2时，树的深度为2(叶子节点层次为2)；若关键字个数<=6时，树的深度不超过3.反之，若B-树的深度为4，则关键字的个数必须>=7 。此时，每个节点都含有可能的关键字的最小数目。

经过一些列计算，说明，在含有N个关键字的B-树上进行查找时，从根节点到关键字所在节点的路径上涉及的节点数不超过...	p253(一个log值)


B树的插入
B树的生成也是从空树起，逐个插入关键字而得。
但是B树节点中的关键字个数必须 ≥[m/2]-1 (取上整），因此，每插入一个关键字不是在树中添加叶子节点，而是首先在最低层的某个非终端节点中添加一个关键字，若该节点关键字个数不超过m-1, 则插入完成，否则分裂。


B树的删除节点
可能有3种情况：
		① 被删关键字所在节点中的关键字数目不小于[m/2](向上取整)
			则只需要删去关键字Ki和相应指针Ai，树的其他部分不变。
		② 被删关键字所在节点中的关键字数目等于[m/2]-1，而与该节点相邻的右兄弟(或左兄弟)节点中的关键字数目大于[m/2]-1
			则需将其兄弟节点中的最小(或最大)的关键字上移至双亲节点中，而将双亲节点中小于(或大于)且紧靠该上移关键字的关键字下移至被删关键字所在节点中。
		③ 被删关键字所在节点和其相邻的兄弟节点中的关键字数目均等于[m/2]-1。
			假设该节点有右兄弟，且其右兄弟节点地址由双亲节点中的指针Ai所指，则在删去关键字之后，它所在节点中剩余的关键字和指针，加上双亲节点中的关键字Ki一起，合并到Ai所指兄弟节点中（若没有右兄弟，则合并到左兄弟中）。




B树、B+树、B*树之间：

B树：二叉树，每个结点只存储一个关键字，等于则命中，小于走左结点，大于
 
走右结点；
 
       B-树：多路搜索树，每个结点存储M/2到M个关键字，非叶子结点存储指向关键
 
字范围的子结点；
 
       所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；
 
       B+树：在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点
 
中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中；
 
       B*树：在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率
 
从1/2提高到2/3；








回顾：
	因为现在还是没能弄明白B树的删除 所以暂时先放一放删除这部分。
	先谈查找、插入。
	一般查找都是相对简单的，繁杂的是构建树和对树进行调整的过程。这里利用了查找函数的返回值，如果找到了就算了不管返回值，如果没找到就返回查找节点应该插入的位置
	这里的插入用了好几个小函数呢。
	让我们先来看看如何插入。
	这里我们已经通过查找函数知道了新节点要插在哪个节点上 和 插在这个节点的第几个位置上。
	插入函数主要看一个值：阶。		【根据阶来判断是否需要将此节点拆分】
	先将新关键字插进节点中，看关键字数量，如果大于等于阶，那么需要拆分，拆分后将新关键字通过【简单】查找到插入所拆分节点的双亲节点中【先前有插过一次新关键字，但是在查分中抛弃了】直到满足小于阶为止。
	插入函数里用到了三个小函数： insert【插入到某节点某位置 不管是否满足条件】	split【将节点的一部分拆分为另外一个节点】		NewRoot【既然整棵树是往上长的，假设长到最高处还要长，就需要新建一个节点了吧】