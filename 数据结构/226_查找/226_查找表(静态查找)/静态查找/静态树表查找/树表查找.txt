静态数表的查找


之前对有序表的查找性能讨论是在等概率的前提下进行的，即当各记录查找概率相等时，按判定树进行折半查找，性能最优，以下讨论概率不等。


看一个例子：
假设有5个记录，各个记录的查找概率不等，分别为p1=0.1,p2=0.2,p3=0.1,p4=0.4,p5=0.2 进行折半查找，平均长度为：
∑(PiCi)(1<=i<=5) = 0.1*2+0.2*3+0.1*1+0.4*2+0.2*3=2.3；
但是若在查找时令给定值先和第四个记录的关键字比较，比较不相等时候继续在左子序列或右子序列中进行折半查找，查找成功的平均长度为：
∑(PiCi)(1<=i<=5) = 0.1*3+0.2*2+0.1*3+0.4*1+0.2*2 = 1.8；

如果只考虑查找成功的情况，则使查找性能达最佳的判定树是其带权路径长度之和PH值(PH值和平均查找长度成正比)
		PH = ∑(wi*hi)(1<=i<=n)
取最小值的二叉树。其中,n为二叉树上节点的个数(有序表长度)；hi为第i个节点在二叉树上的层次树；节点的权wi=c*pi(i=1,2,...n),其中pi为节点的查找概率，c为某常量。称PH值取最小的二叉树为静态最优查找树。

由于构造静态最优查找树的时间代价高，因此选用近似最优查找树的有效算法。

在构造次优查找树的过程中，没有考察单个关键字的相应权值，有可能出现被选为根的关键字的权值比与它相邻的关键字的权值小，此时做适当调整：选取邻近的权值较大的关键字做为次优树根节点 如示例图


查找过程类似折半查找。若树为空，则查找不成功，否则，首先将key和根节点比较，不相等则将给定值key小于或大于根节点的关键字而分别在左子树或右子树中继续查找直至查找成功或失败为止。


回顾：
	依旧是之前的看法 ，这个次优二叉搜索树的构造依托于数学表达式
	大致就是在一段中寻出满足某种条件的一个数，之后在这个数两边继续寻找满足这种条件的两个数作为此数的左右孩子