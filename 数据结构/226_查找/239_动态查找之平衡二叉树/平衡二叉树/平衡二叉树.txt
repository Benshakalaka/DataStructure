平衡二叉树的由来：
由数学计算可知(p244)：构造平衡二叉树可以使得该二叉排序树的平均查找长度和logn是等数量级的。而随机构成的二叉树平均查找长度和logn等数量级的概率约 46.5%。

什么是平衡二叉树？
平衡二叉树又称AVL树。
可能是棵空树。
可能是具有如下性质的二叉树：
它的左子树和右子树都是平衡二叉树，且左子树和右子树的深度差的绝对值不超过1.(定义平衡因子BF：左子树的深度减去右子树的深度，BF可能值为-1,0,1。意味着只要BF绝对值大于1，二叉树就是不平衡)

为什么构建平衡二叉树？
因为AVL树任何节点的左右子树深度不超过1，可证明它的深度和logn(n为节点个数)是同数量级的。由此，平均查找长度也和logn同数量级。

如何构建？
以及一些详细的细节见图

经过旋转平衡处理后，树的深度与插入新节点之前的深度相同(这里的新节点是指会导致二叉树失去平衡并触发旋转算法的节点，普通节点的插入当然可能会影响深度)，因此仅需处理最小不平衡子树即可，因为处理过后深度跟处理之前相同，不影响原有的平衡性。

平衡二叉树的查找分析
查找过程和排序树相同，查找过程中和给定值进行比较个数不超过深度。在平衡二叉树上查找的时间复杂度为 O(logn)。

二叉排序树和二叉平衡树查找性能是在等概率下进行的，若概率不等，则为了提高查找效率，需要对记录先进行排序，使其按照递增(递减)有序，在构造次优查找树。但次优查找树不能在查找过程中个插入节点生成。二叉排序树是动态树表，最优(次优)查找树是静态树表。\









回顾：
	好家伙，来真的？
	首先，要明白什么是平衡因子[包括左高，等高，右高可懂？不懂看cpp]，一旦平衡因子绝对值变成2了，那么说明需要调整作息了[？？？讲哪里去了，讲piáo了]，每个节点都有一个平衡因子。
	据说是个庞然大物呢[好紧张]，删除[汗]，查找[瀑布汗]，插入[直接洪水]
	整个程序在于插入[擦汗，瞬间被冲走]。
	对，插入。
		既然要调解平衡，那就需要两个操作，左平衡，右平衡【左平衡是指失衡节点由于左边的新插入节点而使左边深度大于右边深度2层，需要通过左转+右转套餐 两种平衡方式看图的话很好理解。
		了解了什么是平衡，怎么平衡后开始插入。
	对付这种极其烦的函数，我们采取分情况讨论  +  纸上谈兵  +　擒贼先擒王的攻略。
	其cpp里有讲，但为了以后一眼看明白怎么回事，干了。
	这么烦，这么烦，怎么下手？
	[我靠，0生1，1生2，2生3，3生万物] 树首先是空的！[恭喜！]
	树不空呢？树不空的话就看根的大小该往这个节点发配到哪里去。注意！注意！这里只与根节点进行比较，因为用到了递归。
	【对了，本函数还返回bool类型，和一个形参为tall的引用。 返回值是用来看插入是否成功(失败是因为树中本就存在这个关键字)。tall是用来看插入新节点后子树是否树长高了，再根据以现在节点为根的树的现状判断是否需要调整、】
	新节点插入时候：首先分为在左边还是右边【因为两边的旋转是颠倒的】 若其双亲节点是左高，新节点插在右边则变成等高，tall=0；若右高，同理；若双亲本是空的，那无论插在哪里，tall都为1 继而跳出函数回到上一层递归中，同过tall来影响上一层。上一层也通过自身情况来进行旋转调整。

	系统的来分情况：
		① 判断树是否存在
		② 判断是插在左边还是插在右边
		③ 根据tall判断双亲节点是否需要调整
		④ 对双亲节点的平衡因子进行分情况讨论 
		⑤ 调整旋转 并且注意tall的调整