什么是贪心算法？
贪心算法是通过通过一些列的选择来得到一个问题大家解。它所做的每一个选择都是当前状态下某种意义的最好选择，即贪心选择。希望通过每次所做的贪心选择来导致最终结果是问题的最优解。

选用贪心算法一般具有两个性质：



	① 贪心选择性质
		：是指所求问题的整体最优解可以通过一系列布局最优的选择，即贪心选择来打到。 这往往也是贪心算法与动态规划的主要区别。 动态规划中，每步所做的选择往往依赖于相关子问题的解，因而只有在解出相关子问题后，才做出选择。 贪心算法中，仅在当前状态下做出最好的选择，即局部最优选择，然后再去解做出这个选择后产生的相应的子问题。			对于具体问题，要确定是否具有贪心选择性质，我们必须证明每一步所作的贪心选择最终导致的问题的一个整体最优解。
		首先考察问题的一个整体最优解，并证明可以修改这个最优解，使其以贪心选择开始。而且作了贪心选择后，原问题简化为一个规模更小的类似子问题。然后用数学归纳法证明通过每一步贪心选择最终可得到整体最优解。




	② 最优子结构性质
		：同动态规划



贪心算法与动态规划的差异
		：动态规划算法通常以自底向上的方式解各子问题，而贪心算法则通常以自顶向下的方式进行，以迭代的方式作出相继的贪心选择，每作一次贪心选择就将所求问题简化为一个规模更小的子问题。
			一个具有最优子结构的问题该选用贪心还是动态规划呢？看下面的 0-1背包 与 背包问题。

------------0-1 背包问题【动态规划】
	有N件物品和一个重量为M的背包。（每种物品均只有一件）第i件物品的重量是w[i]，价值是p[i]。求解将哪些物品装入背包可使价值总和最大。
							这问题的求解已经知道了。
------------背包问题。【贪心算法】
	有N件物品和一个重量为M的背包。（每种物品均可以只取部分）第i件物品的重量是w[i]，价值是p[i]。求解将哪些物品装入背包可使价值总和最大。
							这个问题如何求解？ ： 首先是计算每种物品单位重量的价值，v/w ，然后，依照贪心选择策略，将尽可能多的单位重量价值最高的物品装入背包；若此时总重量未超过限定质量c，则将单位重量价值次高的物品尽可能多的装入；依次，直到装满为止。
							那0-1背包能使用贪心算法吗？：不可以。
							因为0-1背包问题是将一个整件的放入，最终不能保证是否能够充分利用限定质量c。书p99 页例子



网上：
动态规划算法和贪心算法有一个显著区别：
1）在动态规划算法中，以自底向上的方式来利用最优子结构，也就是说，首先找到子问题的最优解，解决子问题，然后找到问题的一个最优解。
2）在贪心算法中，以自顶向下的方式使用最优子结构，也就是说，贪心算法会先做出选择，在当时看起来是最优的选择，然后再求解一个结果子问题，而不是先求解子问题的最优解，然后再做出选择。

两者的不同点：
1 贪心算法作出的每步贪心决策都无法改变，因为贪心策略是由上一步的最优解推导下一步的最优解，而上一部之前的最优解则不作保留。 
2 动态规划算法的全局最优解中一定包含某个局部最优解，但不一定包含前一个局部最优解，因此需要记录之前的所有局部最优解