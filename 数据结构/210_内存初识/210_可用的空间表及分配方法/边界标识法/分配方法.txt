可用的空间表及分配方法


用户需求大小为n的内存，可利用空间表中有若干个不小于n的空闲块，通常有3种不同的分配策略：

① 首次拟合法
从表头指针开始查找可利用空间表，将找到的第一个大小不小于n的空闲块的一部分分配给用户。回收时，只要将空闲块插入在链表表头。
	可利用空间表本身不按节点的初识地址有序，也不按节点大小有序。
	由于首次拟合法分配是随机的，通常适用于系统实现不掌握运行期间可能出现的请求分配和释放的信息的情况。
	在分配时需要查询可利用空间表而回收时仅需插入在表头即可。

② 最佳拟合法
将可利用空间表中一个不小于n且最接近n的空闲块的一部分分配给用户。
	在使用最佳拟合法时，为避免每次都要扫视整个链表，，通常预先设定可利用空间表的结构按空间块的大小自小至大有序，由此只需要找到第一块大于n的空闲块即可分配。回收时必须将释放的空闲块插入到合适的位置上去。
	最佳拟合法适用于请求分配的内存大小范围较广的系统。  因为按此方式分配时，总找大小最接近请求的空闲块，由此系统中可能产生一些存储量甚小而无法利用的小片内存，同时也保留了哪些很大的内存以备响应后面将发生的内存量特大的请求，从而使整个链表趋向于差别甚远的状态。
	无论是分配和回收都需要查找链表 最费时间

③ 最差拟合法
将可利用空间中不小于n且是链表中最大的空闲块的一部分分配给用户，为了节省时间 空闲块按照自大至小有序
	最差拟合法每次都从内存最大的节点进行分配，从而使节点链表节点趋于均匀。
	因此适合于请求分配的内存大小范围较窄的系统
	在分配时无需查询链表 回收时需进行查找插入



实际使用情况中，需考虑节点合并问题。
系统在不断分配回收中，大的空闲块被分割成小的占用块，在他们重又成为空闲块后，即使是地址相邻的两个空闲块也只是作为两个节点插入到可利用空间表中，以致后来出现的大容量请求分配无法进行。
	为了更有效利用，要求在回收时应考虑将地址相邻的空闲块合并成尽可能大的节点。In other words, 在回收空闲块时首先应该检查地址与他相邻的内存快是否空闲。]


总结：	主要两个算法：① 内存分配 一个if
			㈠ 满足temp->size-n <= e ，则直接分配
			㈡ 否则从一块中割出一部分
		      ② 内存回收 一个if
			㈠ 两边不空 直接插入
			㈡ 左边空 接在左边后面
			㈢ 右边空 取代右边 将右边接在自己后面
			㈣ 两边都空 以左为头 插在左后面 删除右 将右接在自己后面