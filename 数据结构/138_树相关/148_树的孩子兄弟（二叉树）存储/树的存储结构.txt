树的存储结构
1、双亲表示法
--------------存储表示------------
#define MAXSIZE 100
typedef struct PTNode
{
	Type data;
	int  parent;			//双亲位置域
}PNode;
typedef struct
{
	PTNode nodes[MAXSIZE];		//顺序存储的方式
	int    r,n;			//根的位置和节点树
}PTree;
------------------------------------
这种结构利用每个节点只有一个双亲的性质  反复调用PARENT，直到遇到无双亲的，就是根节点了。但是，求节点的孩子时需要遍历整个结构
详细见图。



************************************************************************************************************************
2、孩子表示法
--------------存储表示------------
typedef struct CTNode			//单个节点中存放孩子节点
{
	int child;
	struct CTNode *next;
}*ChildPtr;
typedef struct 				//单个节点
{
	type data;
	ChildPtr firstchild;		//孩子链表头指针
}CTBox;
typedef struct
{
	CTBox nodes[MAXSIZE];		//顺序存储的方式
	int n,r;			//节点树和跟的位置
}
当然，这种图便于知道孩子节点  但不方便知道双亲节点  所以可以在孩子存储结构中添加双亲指针 
详细见图。


************************************************************************************************************************
3、孩子兄弟表示法（二叉树表示法）
--------------存储表示------------
typedef struct CSNode
{
	type data;
	struct CSNode *firstchild,*nextsibling;
}CSNode,*CSTree;
二叉树链表作为树的存储结构。链表中两个链域分别指向该节点的第一个孩子节点和下一个兄弟节点。


树的先序即为转化后二叉树的先序
后序则为................................的中序