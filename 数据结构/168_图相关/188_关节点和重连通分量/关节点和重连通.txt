关节点：
假若在删去顶点v以及和v相关联的各边之后，将图的一个连通分量分割成两个或两个以上的连通分量，则该顶点为关节点。

重连通图：  一个没有关节点的连通图。

在重连通图上任意一对顶点之间至少存在两条路径，则在删去某个顶点以及依附于该顶点的各边时也不破坏图的连通性。

连通度K 
在连通图上至少删去k个顶点才能破坏图的连通性，则k为连通度

对树中任意顶点v而言，其孩子节点为在它之后搜索到的邻接点，而其双亲节点和由回边联结的祖先节点是在它之前搜索到的邻接点。

两类关节点的特性：（由深度优先生成树可得出）
⑴ 若生成树的根有两棵或两棵以上的子树，则此根节点必为关节点。因为图中不存在联结不同子树中顶点的边，因此，若删去根顶点，生成树便变成生成森林。如示例图（本文件夹中的图）中的顶点A
⑵ 若生成树中某个非叶子顶点v，其某棵子树的根和子树中的其他节点均没有指向v的祖先的回边，则v为关节点。因为，若删去v，则其子树和图的其他部分被分隔开来。如示例图中的顶点B、D和G。

应用：
① 一个表示通信网络的图的连通度越高，其系统越可靠，无论是哪一点出现故障或遭到外界破坏 都不影响正常工作。
② 一个航空网络是重连通的 则当某条航线因天气等某种原因关闭时，旅客仍能从别的航线绕道而行。
③ 将大规模的集成电路的关键路线设计成重连通的话，某些元件失效依旧可以工作。
④ 在战争中，要摧毁敌方的运输线，仅需破坏其运输网中的关节点即可。


总结：	 本算法要干什么看应用就可以。
	本算法主要在于四个判断：	① FindArticul函数中判断 if(count<G.vexnum)看根节点是否为关节点，有多个子节点则输出根节点并循环检验其余子节点。
				② DFSArticul函数中判断 min > low[p] 看是否可以通过自己的子节点链接到自己的双亲或祖宗节点。
				③ DFSArticul函数中判断 low[p]>visit_order[v0] 看是否子节点的low大于本节点的遍历顺序，大于则判定自己为关节点。
				④ DFSArticul函数中判断 if(visited) 看是否已被访问，已被访问过则为自己的双亲或祖宗节点，则可以连到这个点，即low = visit_order[p];
				