Dijkstra算法 ：按路径长度递增的次序产生最短路径的算法
	一般情况下，假设S为已求的最短路径的终点的集合，则可证明：下一条最短路径（设其终点为x）一定是弧（v，x），或者是中间只经过S中的顶点而最后到达顶点x的路径。

文件夹中有示例以及示例运算过程

这个算法的时间复杂度为O(n^2)




总结：	本算法是求一个点到所有点的最短路径。
	根据算法描述：，假设S为已求的最短路径的终点的集合，则可证明：下一条最短路径（设其终点为x）一定是弧（v，x），或者是中间只经过S中的顶点而最后到达顶点x的路径。
	算法主要利用到3个数组    ① final[] 数组用于记录是否该顶点已在最短路径集合中(因为点到其余点的最短路径是要建立在集合中的点的基础上的)
			      ② PathMartic &P 二维数组。若P[v][w]为TRUE 则w是从v0到v当前求得最短路径上的点。这个数组是结果数组。
			      ③ ShortPathTable &D 一维数组 用于记录该点到每一个其余点的路径长度。  这个数组和final 数组是整个算法最主要的两个元素 最终构成P这个结果二维数组。从此数组中选出最短的一条，即取得要加入最短路径集合的顶点元素，之后更新此D数组和P数组(因为final数组中新增元素可能导致这个点同过集合中的点到其余点的路径变短(或从INFINY变成实数))，更新玩后，即循环之前步骤。